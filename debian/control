Source: wasi-libc
Section: devel
Priority: optional
Maintainer: Pexip AS <packaging@pexip.com>
XSBC-Pexip-Original-Maintainer: Debian Rust Maintainers <pkg-rust-maintainers@alioth-lists.debian.net>
XSBC-Pexip-Original-Uploaders: Ximin Luo <infinity0@debian.org>
Build-Depends: debhelper-compat (= 12), clang-13, llvm-13
Standards-Version: 4.4.1
Homepage: https://github.com/CraneStation/wasi-libc
Vcs-Browser: https://salsa.debian.org/rust-team/wasi-libc
Vcs-Git: https://salsa.debian.org/rust-team/wasi-libc.git
XS-Pexip-Upstream: http://ftp.debian.org/debian/ bookworm

Package: wasi-libc
Architecture: all
Multi-Arch: foreign
Depends: ${misc:Depends}
Description: WASI libc implementation for WebAssembly
 This is a work in progress. It's usable for many purposes, though the APIs
 aren't stable yet. For example, this is used by the Rust compiler to build
 its standard library for the wasm32-wasi target.
 .
 First, it's a usable libc. It builds a "libc" which can be used by compilers,
 such as Clang 8.0, using the wasm32-wasi target. It's a work in progress, but
 it is already sufficient to run basic programs.
 .
 Second, it's a "reference" implementation, which means the interfaces defined
 here can be used by other tools and libraries, even if they don't use all the
 actual implementations here. For example, we don't expect everyone will want to
 use the exact malloc implementation provided here, but tools and libraries
 using an ABI-compatible malloc interface will be able to interoperate
 regardless of which actual implementation is used.
 .
 Third, it's an example showing the use of the WASI API. The libc functionality
 is implemented using calls to WASI functions.
